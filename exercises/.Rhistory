mutate(significant= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(annotations) %>% # pull across the extra columns, based on a "gene_id" match
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=significant)) +
geom_point(alpha=0.75, shape=16) +
geom_text(data= . %>% filter(significant), aes(label=xen_gene_symbol)) +
ggtitle("Dorsum vs. Ventrum") +
theme_bw() +
theme(legend.position="none")
# use pacman to load libraries
pacman::p_load(tidyverse, DESeq2, ggrepel)
res_pos %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(significant= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(annotations) %>% # pull across the extra columns, based on a "gene_id" match
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=significant)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(data= . %>% filter(significant), aes(label=xen_gene_symbol)) +
ggtitle("Dorsum vs. Ventrum") +
theme_bw() +
theme(legend.position="none")
res_pos %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(significant= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(annotations) %>% # pull across the extra columns, based on a "gene_id" match
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=significant, label=xen_gene_symbol)) +
geom_point(alpha=0.75, shape=16) +
ggtitle("Dorsum vs. Ventrum") +
theme_bw() +
theme(legend.position="none")
p1<-res_pos %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(significant= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(annotations) %>% # pull across the extra columns, based on a "gene_id" match
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=significant, label=xen_gene_symbol)) +
geom_point(alpha=0.75, shape=16) +
ggtitle("Dorsum vs. Ventrum") +
theme_bw() +
theme(legend.position="none")
plotly::ggplotly(p1, tooltip = "label")
# use pacman to load libraries
pacman::p_load(tidyverse, DESeq2, ggrepel, plotly)
# convert the ggplot to a plotly object
ggplotly(p1, tooltip = "label")
# load a reduced annotation file
melaning_genes<-read_csv("../data/melanin_genes.csv")
melaning_genes
# combine the two DESeq results tables
res<-bind_rows(res_pos %>%
as_tibble(rownames="gene_id") %>%
mutate(contrast="Dorsal vs. Ventral"),
res_bg %>%
as_tibble(rownames="gene_id") %>%
mutate(contrast="Black vs. White"))
# plot
res %>%
drop_na(padj) %>%
filter(padj<0.5) %>%
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>%
left_join(melaning_genes) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig)) +
geom_point(alpha=0.75, shape=16) +
facet_wrap(~contrast, ncol = 2, scales = "free") +
xlim(-15,15) +
theme_minimal() +
scale_color_manual(values=c("grey","black")) +
theme(legend.position = "none")
# plot
res %>%
drop_na(padj) %>%
filter(padj<0.5) %>%
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>%
left_join(melaning_genes) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig)) +
geom_point(alpha=0.75, shape=16) +
facet_wrap(~contrast, ncol = 2, scales = "free") +
#  xlim(-15,15) +
theme_minimal() +
scale_color_manual(values=c("grey","black")) +
theme(legend.position = "none")
# plot
res %>%
drop_na(padj) %>%
filter(padj<0.5) %>%
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>%
left_join(melaning_genes) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(aes(label=gene_symbol)) +
xlim(-15,15) + # fix axis width
facet_wrap(~contrast, ncol = 2, scales = "free") +
theme_minimal() +
scale_color_manual(values=c("grey","black")) +
theme(legend.position = "none")
# plot
res %>%
drop_na(padj) %>%
filter(padj<0.5) %>%
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>%
left_join(melaning_genes) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(aes(label=gene_symbol), max.overlaps = Inf) +
xlim(-15,15) + # fix axis width
facet_wrap(~contrast, ncol = 2, scales = "free") +
theme_minimal() +
scale_color_manual(values=c("grey","black")) +
theme(legend.position = "none")
# plot
res %>%
drop_na(padj) %>%
filter(padj<0.5) %>%
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>%
left_join(melaning_genes) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig, label=gene_symbol)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(max.overlaps = Inf) + # set the maximum overlap to infinity, to show all labels.
xlim(-15,15) + # fix axis width
facet_wrap(~contrast, ncol = 2, scales = "free") +
theme_minimal() +
scale_color_manual(values=c("grey","black")) +
theme(legend.position = "none")
# plot
res %>%
drop_na(padj) %>%
filter(padj<0.5) %>%
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>%
left_join(melaning_genes) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig, label=gene_symbol)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(max.overlaps = Inf) + # set the maximum overlap to infinity, to show all labels.
xlim(-15,15) + # fix axis width
facet_wrap(~contrast, ncol = 2) + # facet based on contrast
theme_minimal() +
scale_color_manual(values=c("grey","black")) +
theme(legend.position = "none")
# plot
res %>%
drop_na(padj) %>%
filter(padj<0.5) %>%
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>%
left_join(melaning_genes) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig, label=gene_symbol)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(max.overlaps = Inf) + # set the maximum overlap to infinity, to show all labels.
xlim(-15,15) + # fix axis width
facet_wrap(~contrast) + # facet based on contrast
theme_minimal() +
scale_color_manual(values=c("grey","black")) +
theme(legend.position = "none")
# plot
res %>%
drop_na(padj) %>%
filter(padj<0.5) %>%
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>%
left_join(melaning_genes) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig, label=gene_symbol)) +
geom_point(alpha=0.5, shape=16) +
geom_text_repel(max.overlaps = Inf) + # set the maximum overlap to infinity, to show all labels.
xlim(-15,15) + # fix axis width
facet_wrap(~contrast) + # facet based on contrast
theme_minimal() +
scale_color_manual(values=c("grey","black")) +
theme(legend.position = "none")
# plot
res %>%
drop_na(padj) %>%
filter(padj<0.5) %>%
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>%
left_join(melaning_genes) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig, label=gene_symbol)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(max.overlaps = Inf) + # set the maximum overlap to infinity, to show all labels.
xlim(-15,15) + # fix axis width
facet_wrap(~contrast) + # facet based on contrast
theme_minimal() +
scale_color_manual(values=c("grey","black")) +
theme(legend.position = "none")
# plot
res %>%
drop_na(padj) %>%
#  filter(padj<0.5) %>%
mutate(sig= padj<0.05 & abs(log2FoldChange)>=2) %>%
left_join(melaning_genes) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig, label=gene_symbol)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(max.overlaps = Inf) + # set the maximum overlap to infinity, to show all labels.
xlim(-15,15) + # fix axis width
facet_wrap(~contrast) + # facet based on contrast
theme_minimal() +
scale_color_manual(values=c("grey","black")) +
theme(legend.position = "none")
# plot
res %>%
drop_na(padj) %>%
#  filter(padj<0.5) %>%
mutate(sig= padj<0.05) %>% # lets be a bit more relaxed and not put a threshold on the fold change
left_join(melaning_genes) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig, label=gene_symbol)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(max.overlaps = Inf) + # set the maximum overlap to infinity, to show all labels.
xlim(-15,15) + # fix axis width
facet_wrap(~contrast) + # facet based on contrast
theme_minimal() +
scale_color_manual(values=c("grey","black")) +
theme(legend.position = "none")
res_pos %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(significant= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(annotations) %>% # pull across the extra columns, based on a "gene_id" match
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=significant, label=xen_gene_symbol)) + # add label text
geom_point(alpha=0.75, shape=16) +
geom_text_repel(data= . %>% filter(significant)) + # show only the labels for the significant genes
ggtitle("Dorsum vs. Ventrum") +
theme_bw() +
theme(legend.position="none")
res_pos %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(significant= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(annotations) %>% # pull across the extra columns, based on a "gene_id" match
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=significant, label=xen_gene_symbol)) +# add label text
geom_point(alpha=0.75, shape=16) +
geom_text(data= . %>% filter(significant)) + # add text labels for only the significant genes
ggtitle("Dorsum vs. Ventrum") +
theme_bw() +
theme(legend.position="none")
res_pos %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(significant= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(annotations) %>% # pull across the extra columns, based on a "gene_id" match
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=significant, label=xen_gene_symbol)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(data= . %>% filter(significant)) +
ggtitle("Dorsum vs. Ventrum") +
theme_bw() +
theme(legend.position="none")
# save the plot as a ggplot object
p1<-res_pos %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(significant= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(annotations) %>% # pull across the extra columns, based on a "gene_id" match
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=significant, label=xen_gene_symbol)) + # add the labels as an aesthetic, not a text label
geom_point(alpha=0.75, shape=16) +
ggtitle("Dorsum vs. Ventrum") +
theme_bw() +
theme(legend.position="none")
# convert the ggplot to a plotly object
ggplotly(p1, tooltip = "label")
# load a reduced annotation file
melaning_genes<-read_csv("../data/melanin_genes.csv")
melaning_genes
# combine the two DESeq results tables
res<-bind_rows(res_pos %>%
as_tibble(rownames="gene_id") %>%
mutate(contrast="Dorsal vs. Ventral"),
res_bg %>%
as_tibble(rownames="gene_id") %>%
mutate(contrast="Black vs. White"))
# plot
res %>%
drop_na(padj) %>%
#  filter(padj<0.5) %>%
mutate(sig= padj<0.05) %>% # lets be a bit more relaxed and not put a threshold on the fold change
left_join(melaning_genes) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig, label=gene_symbol)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(max.overlaps = Inf) + # set the maximum overlap to infinity, to show all labels.
xlim(-15,15) + # fix axis width
facet_wrap(~contrast) + # facet based on contrast
theme_minimal() +
scale_color_manual(values=c("grey","black")) +
theme(legend.position = "none")
res %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(sig= padj<0.05) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(mel_genes) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig)) +
geom_point(alpha=0.5, shape=16) +
ggrepel::geom_text_repel(data=. %>%
drop_na(gene_name), aes(label=`gene_symbol`), max.overlaps = 100) +
facet_wrap(~contrast, ncol = 2, scales = "free") +
xlim(-15,15) +
theme_minimal() +
scale_color_manual(values=c("grey","black")) +
theme(legend.position = "none")
# plot
res %>%
drop_na(padj) %>%
#  filter(padj<0.5) %>%
mutate(sig= padj<0.05) %>% # lets be a bit more relaxed and not put a threshold on the fold change
left_join(melaning_genes) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig, label=gene_symbol)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(max.overlaps = Inf) + # set the maximum overlap to infinity, to show all labels.
xlim(-15,15) + # fix axis width
facet_wrap(~contrast) + # facet based on contrast
theme_minimal() +
scale_color_manual(values=c("grey","black")) +
theme(legend.position = "none")
dds_vst
assay(dds_vst)
assay(dds_vst) %>%
as_tibble(rownames="gene_id") %>%
left_join(mel_genes)
assay(dds_vst) %>%
as_tibble(rownames="gene_id") %>%
left_join(mel_genes)
drop_na(gene_symbol)
assay(dds_vst) %>%
as_tibble(rownames="gene_id") %>%
left_join(mel_genes) %>%
drop_na(gene_symbol)
assay(dds_vst) %>%
as_tibble(rownames="gene_id") %>%
left_join(mel_genes) %>%
drop_na(gene_symbol) %>%
dplyr::select(gene_id, gene_symbol, where(is.numeric)) %>%
pivot_longer(-c(gene_id, gene_symbol), values_to = "expression")
assay(dds_vst) %>%
as_tibble(rownames="gene_id") %>%
left_join(mel_genes) %>% # add annotations
drop_na(gene_symbol) %>% # keep only genes with annotations
left_join(rna_samples)
rna_samples
assay(dds_vst) %>%
as_tibble(rownames="gene_id") %>%
left_join(mel_genes) %>% # add annotations
drop_na(gene_symbol) %>% # keep only genes with annotations
dplyr::select(gene_id, gene_symbol, where(is.numeric)) %>%
pivot_longer(-c(gene_id, gene_symbol), names_to="sample", values_to = "expression") %>%
left_join(rna_samples)
assay(dds_vst) %>%
as_tibble(rownames="gene_id") %>%
left_join(mel_genes) %>% # add annotations
drop_na(gene_symbol) %>% # keep only genes with annotations
dplyr::select(gene_id, gene_symbol, where(is.numeric)) %>%
pivot_longer(-c(gene_id, gene_symbol), names_to="sample", values_to = "expression")
rna_samples
assay(dds_vst) %>%
as_tibble(rownames="gene_id") %>%
left_join(mel_genes) %>% # add annotations
drop_na(gene_symbol) %>% # keep only genes with annotations
dplyr::select(gene_id, gene_symbol, where(is.numeric)) %>%
pivot_longer(-c(gene_id, gene_symbol), names_to="sample_id", values_to = "expression") %>%
left_join(rna_samples)
assay(dds_vst) %>%
as_tibble(rownames="gene_id") %>%
left_join(mel_genes) %>% # add annotations
drop_na(gene_symbol) %>% # keep only genes with annotations
dplyr::select(gene_id, gene_symbol, where(is.numeric)) %>%
pivot_longer(-c(gene_id, gene_symbol), names_to="sample_id", values_to = "expression") %>%
left_join(rna_samples) %>% # pull in experimental info about samples
# normalize expression per gene so that all are between -1 and 1
ggplot(aes(x=position, y=expression, color=background)) +
stat_summary(aes(group = treatment), fun = mean, geom = "path") +
stat_summary(aes(color = treatment), fun.data = mean_cl_boot, geom = "errorbar", width = 0.1) +
stat_summary(aes(color = treatment), fun= mean, geom = "point", size = 2) +
scale_color_manual(values = c("black"="black","white"="grey80")) +
facet_wrap(~gene_symbol) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
assay(dds_vst) %>%
as_tibble(rownames="gene_id") %>%
left_join(mel_genes) %>% # add annotations
drop_na(gene_symbol) %>% # keep only genes with annotations
dplyr::select(gene_id, gene_symbol, where(is.numeric)) %>%
pivot_longer(-c(gene_id, gene_symbol), names_to="sample_id", values_to = "expression") %>%
left_join(rna_samples) %>% # pull in experimental info about samples
# normalize expression per gene so that all are between -1 and 1
ggplot(aes(x=position, y=expression, color=background)) +
stat_summary(aes(group = background), fun = mean, geom = "path") +
stat_summary(aes(color = background), fun.data = mean_cl_boot, geom = "errorbar", width = 0.1) +
stat_summary(aes(color = background), fun= mean, geom = "point", size = 2) +
scale_color_manual(values = c("black"="black","white"="grey80")) +
facet_wrap(~gene_symbol) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
assay(dds_vst) %>%
as_tibble(rownames="gene_id") %>%
left_join(mel_genes) %>% # add annotations
drop_na(gene_symbol) %>% # keep only genes with annotations
dplyr::select(gene_id, gene_symbol, where(is.numeric)) %>%
pivot_longer(-c(gene_id, gene_symbol), names_to="sample_id", values_to = "expression") %>%
left_join(rna_samples) %>% # pull in experimental info about samples
# instead of calculating means and standard deviations, we will use the stat_summary() layer from ggplot to calculate these on the fly.
ggplot(aes(x=position, y=expression, color=background)) +
stat_summary(aes(group = background), fun = mean, geom = "path") +
stat_summary(aes(color = background), fun.data = mean_cl_boot, geom = "errorbar", width = 0.1) +
stat_summary(aes(color = background), fun= mean, geom = "point", size = 2) +
scale_color_manual(values = c("black"="black","white"="grey80")) +
facet_wrap(~gene_symbol) +
theme_bw()
assay(dds_vst) %>%
as_tibble(rownames="gene_id") %>%
left_join(mel_genes) %>% # add annotations
drop_na(gene_symbol) %>% # keep only genes with annotations
dplyr::select(gene_id, gene_symbol, where(is.numeric)) %>%
pivot_longer(-c(gene_id, gene_symbol), names_to="sample_id", values_to = "expression") %>%
left_join(rna_samples) %>% # pull in experimental info about samples
# instead of calculating means and standard deviations, we will use the stat_summary() layer from ggplot to calculate these on the fly.
ggplot(aes(x=position, y=expression, color=background)) +
stat_summary(aes(group = background), fun = mean, geom = "path") +
stat_summary(aes(color = background), fun.data = mean_cl_boot, geom = "errorbar", width = 0.1) +
stat_summary(aes(color = background), fun= mean, geom = "point", size = 2) +
scale_color_manual(values = c("black"="black","white"="grey80")) +
facet_wrap(~gene_symbol) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) # remove grid lines
assay(dds_vst) %>%
as_tibble(rownames="gene_id") %>%
left_join(mel_genes) %>% # add annotations
drop_na(gene_symbol) %>% # keep only genes with annotations
select(gene_id, gene_symbol, where(is.numeric)) %>%
pivot_longer(-c(gene_id, gene_symbol), names_to="sample_id", values_to = "expression") %>%
left_join(rna_samples) %>% # pull in experimental info about samples
# instead of calculating means and standard deviations, we will use the stat_summary() layer from ggplot to calculate these on the fly.
ggplot(aes(x=position, y=expression, color=background)) +
stat_summary(aes(group = background), fun = mean, geom = "path") +
stat_summary(aes(color = background), fun.data = mean_cl_boot, geom = "errorbar", width = 0.1) +
stat_summary(aes(color = background), fun= mean, geom = "point", size = 2) +
scale_color_manual(values = c("black"="black","white"="grey80")) +
facet_wrap(~gene_symbol) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) # remove grid lines
detach("package:GO.db", unload = TRUE)
detach("package:gprofiler2", unload = TRUE)
assay(dds_vst) %>%
as_tibble(rownames="gene_id") %>%
left_join(mel_genes) %>% # add annotations
drop_na(gene_symbol) %>% # keep only genes with annotations
select(gene_id, gene_symbol, where(is.numeric)) %>%
pivot_longer(-c(gene_id, gene_symbol), names_to="sample_id", values_to = "expression") %>%
left_join(rna_samples) %>% # pull in experimental info about samples
# instead of calculating means and standard deviations, we will use the stat_summary() layer from ggplot to calculate these on the fly.
ggplot(aes(x=position, y=expression, color=background)) +
stat_summary(aes(group = background), fun = mean, geom = "path") +
stat_summary(aes(color = background), fun.data = mean_cl_boot, geom = "errorbar", width = 0.1) +
stat_summary(aes(color = background), fun= mean, geom = "point", size = 2) +
scale_color_manual(values = c("black"="black","white"="grey80")) +
facet_wrap(~gene_symbol) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) # remove grid lines
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
message=FALSE,
error=FALSE,
fig.width=12)
knitr::opts_knit$set(root.dir = './')
library(webexercises)
# Chunk 2
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse, DESeq2, ggrepel, plotly)
# Chunk 3
txi<-readRDS("../data/salmon_gene_counts.rds")
str(txi)
# Chunk 4
class(txi)
str(txi)
lapply(X=txi, FUN=head)
# Chunk 5
apply(X=txi$abundance, FUN=sum, MARGIN = 2)
# Chunk 6
txi$counts %>%
as_tibble() %>% # turns matrix into tibble object class
pivot_longer(everything(), names_to="sample", values_to="counts") %>% # turns wide table to long table
mutate(counts=counts+1) %>% # we are going to plot on a log scale, so lets add 1 to each count so that log10(1) = 0
#  filter(counts>1) %>%
ggplot(aes(counts)) +
geom_histogram() +
ylab("number of genes") +
scale_x_log10() +
facet_wrap(~sample)
# Chunk 7
# find rownames where all counts == 0
keepers<-rownames(txi$counts)[rowSums(txi$counts)>10]
length(keepers)
# keep all those rows
txi$counts<-txi$counts[keepers,]
txi$abundance<-txi$abundance[keepers,]
txi$length<-txi$length[keepers,]
#confirm rows have been dropped
dim(txi$counts)
# Chunk 8
samples<-read.csv("../data/experiment_data.csv")
samples
rna_samples<-tibble(
sample_id=colnames(txi$counts),
specimen_id=str_extract(sample_id, "\\d+") %>% as.numeric(),
position=str_extract(sample_id, "[A-Z]")
) %>%
left_join(samples)
rna_samples
rna_samples %>%
group_by(position, background) %>%
count()
