theme_classic()
dat_long %>%
ggplot(mapping=aes(x=wavelength, y=reflectance, color=background)) + # drop the grouping variable here
geom_smooth(stat="smooth", method="loess", span=0.2) + # fit loess smoothing with a more relaxed smoothing span
facet_wrap(~position) +
theme_classic()
# calculate area under the curve for each specimen
dat_area<-dat_long %>%
group_by(specimen_id, position, background) %>%
summarise(brightness=sum(reflectance)) %>%
ungroup()
# plot boxplot
dat_area %>%
ggplot(aes(x=background, y=brightness, fill=position)) +
geom_boxplot()
# calculate means and sd and plot as reaction norms
dat_area%>%
group_by(position, background) %>%
mutate(mean_brightness=mean(brightness),
sd_brightness=sd(brightness)) %>%
ggplot(aes(x=background, color=position)) +
geom_point(aes(y=brightness)) +
geom_point(aes(y=mean_brightness), size=4) +
geom_line(aes(y=mean_brightness, group=position)) +
geom_errorbar(aes(ymin=mean_brightness-sd_brightness, ymax=mean_brightness+sd_brightness), width=0.1) +
theme_bw()
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse,
DESeq2,
ggrepel,
plotly)
txi<-readRDS("../data/salmon_gene_counts.rds")
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
message=FALSE,
error=FALSE,
fig.width=12,
fig.height=8)
library(webexercises)
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse,
DESeq2,
ggrepel,
plotly)
txi<-readRDS("../data/salmon_gene_counts.rds")
knitr::opts_knit$set(root.dir = './')
txi<-readRDS("../data/salmon_gene_counts.rds")
getwd()
knitr::opts_chunk$set(echo = TRUE,
eval = FALSE,
message=FALSE,
error=FALSE,
fig.width=12,
fig.height=8)
library(webexercises)
#install.packages("tidyverse",repos ="https://cran.rstudio.com/")
library(tidyverse)
#install.packages("tidyverse",repos ="https://cran.rstudio.com/")
library(tidyverse)
#install.packages("tidyverse",repos ="https://cran.rstudio.com/")
library(tidyverse)
#install.packages("tidyverse",repos ="https://cran.rstudio.com/")
library(tidyverse)
#install.packages("tidyverse",repos ="https://cran.rstudio.com/")
library(tidyverse)
dat_spect<-read_csv("../data/minolta_data.csv")
dat_spect
dat_spect<-read_csv("../data/minolta_data.csv")
dat_spect
setwd("~/Documents/git_projects/UAM_NewTech/exercises")
dat_spect<-read_csv("../data/minolta_data.csv")
dat_spect
dat_spect
colname(dat_spect)
colnames(dat_spect)
dat_spect
colnames(dat_spect)
dat_spect
nrow(dat_spect)
nrow(x=dat_spect)
nrow(dat_spect)
dat_spect %>% nrow()
dat_spect %>% nrow()
## same as:
dat_spect %>%
nrow()
dat_spect
dat_spect %>%
filter(id>20)
dat_spect %>%
filter(id>20) %>% # specify rows to keep
select(-sample)
dat_spect %>%
filter(id>20) %>% # specify rows to keep
select(-sample) %>% # specify columns to keep (or with a minus, which ones to drop)
arrange(`360nm`) # specify row order based on column values
dat_spect %>%
filter(id>20) %>% # specify rows to keep
select(-sample) %>% # specify columns to keep (or with a minus, which ones to drop)
arrange(`360nm`) # specify row order based on column values
dat_spect
dat_spect %>%
separate(col=sample, into=c("specimen_id","position"), sep="_")
dat_spect %>%
mutate(banana="banana")
dat_spect %>%
mutate(position=str_extract(string=sample, pattern="[A-Z]")) # mutate to create a new variable/column, [A-Z] to find only letters
# it looks like we have created the column, but it's at the very end. lets move around the columns
dat_spect %>%
mutate(position=str_extract(string=sample, pattern="[A-Z]")) %>%
select(position,everything())
banana<-"banana"
dat_clean<-dat_spect %>%
separate(col=sample, into=c("specimen_id","position"), sep="_") %>%
select(-id)
dat_clean
dat_clean
dat_clean %>%
group_by(specimen_id, position)
dat_clean %>%
group_by(specimen_id, position) %>% # group by one or more columns
summarise(mean_360=mean(`360nm`)) # use summarise to create a new variable, and apply a function to it
dat_clean
dat_clean %>%
group_by(specimen_id, position) %>% # group by one or more columns
summarise(mean_360=mean(`360nm`)) # use summarise to create a new variable, and apply a function to it
dat_clean %>%
#group_by(specimen_id, position) %>% # group by one or more columns
summarise(mean_360=mean(`360nm`)) # use summarise to create a new variable, and apply a function to it
dat_clean %>%
group_by(specimen_id) %>% # group by one or more columns
summarise(mean_360=mean(`360nm`)) # use summarise to create a new variable, and apply a function to it
dat_clean %>%
group_by(specimen_id, position) %>%
summarise(mean=mean(`360nm`),
sd=sd(`360nm`))
dat_clean %>%
group_by(specimen_id, position) %>%
summarise_all(mean)
dat_mean<-dat_clean %>%
group_by(specimen_id, position) %>%
summarise_all(mean)  %>%
ungroup()
dat_mean
dat_exp<-read_csv("../data/experiment_data.csv")
dat_exp
dat_mean %>%
left_join(dat_exp)
dat_final<-dat_mean %>% # create a new object
mutate(specimen_id=as.numeric(specimen_id)) %>% # overwrite specimen_id as numeric variable
left_join(dat_exp) %>% # pull over extra columns from the dat_exp table
select(specimen_id, position, background, everything()) # arrange the columns
dat_final
dat_final
## lets reshape it!
dat_long<-dat_final %>%
pivot_longer(-c(specimen_id, position, background), names_to = "wavelength", values_to = "reflectance")
dat_long
ggplot(data=dat_long,
mapping=aes(x=wavelength, y=reflectance))
dat_long %>% # we can also pipe the data to the plot. This is useful if we want to manipulate it first
filter(specimen_id==10) %>% # keep only one sample (10)
ggplot(mapping=aes(x=wavelength, y=reflectance)) %>%
geom_point()
dat_long %>% # we can also pipe the data to the plot. This is useful if we want to manipulate it first
filter(specimen_id==10) %>% # keep only one sample (10)
ggplot(mapping=aes(x=wavelength, y=reflectance)) +
geom_point()
dat_long %>% # we can also pipe the data to the plot. This is useful if we want to manipulate it first
filter(specimen_id==10)
dat_long %>% # we can also pipe the data to the plot. This is useful if we want to manipulate it first
filter(specimen_id==10) %>% # keep only one sample (10)
ggplot(mapping=aes(x=wavelength, y=reflectance)) +
geom_point()
# line graph
dat_long %>% # we can also pipe the data to the plot. This is useful if we want to manipulate it first
filter(specimen_id==10) %>% # keep only one sample (10)
ggplot(mapping=aes(x=wavelength, y=reflectance, group=position)) + # add grouping to have different lines for dorsal and ventral measurements
geom_line()
# line graph
dat_long %>% # we can also pipe the data to the plot. This is useful if we want to manipulate it first
filter(specimen_id==10) %>% # keep only one sample (10)
ggplot(mapping=aes(x=wavelength, y=reflectance)) + # add grouping to have different lines for dorsal and ventral measurements
geom_line()
# line graph
dat_long %>% # we can also pipe the data to the plot. This is useful if we want to manipulate it first
filter(specimen_id==10) %>% # keep only one sample (10)
ggplot(mapping=aes(x=wavelength, y=reflectance, group=position)) + # add grouping to have different lines for dorsal and ventral measurements
geom_line()
dat_long %>% # we can also pipe the data to the plot. This is useful if we want to manipulate it first
filter(specimen_id==10) %>% # keep only one sample (10)
ggplot(mapping=aes(x=wavelength, y=reflectance, group=position, color=position)) + # add grouping to have different lines for dorsal and ventral measurements
geom_line()
# line graph
dat_long %>% # we can also pipe the data to the plot. This is useful if we want to manipulate it first
filter(specimen_id==10) %>% # keep only one sample (10)
ggplot(mapping=aes(x=wavelength, y=reflectance, color=position)) + # colour replaces grouping for have different lines for dorsal and ventral measurements
geom_line() +
## add a title
ggtitle("Spectral reflectances of dorsal and ventral skin") +
## apply a canned theme
theme_classic()
# line graph
dat_long %>% # we can also pipe the data to the plot. This is useful if we want to manipulate it first
filter(specimen_id==10) %>% # keep only one sample (10)
ggplot(mapping=aes(x=wavelength, y=reflectance, color=position)) + # colour replaces grouping for have different lines for dorsal and ventral measurements
geom_line() +
## add a title
ggtitle("Spectral reflectances of dorsal and ventral skin") +
## apply a canned theme
theme_bw()
# line graph
dat_long %>% # we can also pipe the data to the plot. This is useful if we want to manipulate it first
filter(specimen_id==10) %>% # keep only one sample (10)
ggplot(mapping=aes(x=wavelength, y=reflectance, color=position)) + # colour replaces grouping for have different lines for dorsal and ventral measurements
geom_line() +
## add a title
ggtitle("Spectral reflectances of dorsal and ventral skin") +
## apply a canned theme
theme_classic()
dat_long %>% # we can also pipe the data to the plot. This is useful if we want to manipulate it first
filter(specimen_id==10) %>% # keep only one sample (10)
ggplot(mapping=aes(x=wavelength, y=reflectance, color=position)) + # colour replaces grouping for have different lines for dorsal and ventral measurements
geom_line()
dat_long %>% # we can also pipe the data to the plot. This is useful if we want to manipulate it first
filter(specimen_id==10) %>% # keep only one sample (10)
ggplot(mapping=aes(x=wavelength, y=reflectance, group=position, color=position)) + # add grouping to have different lines for dorsal and ventral measurements
geom_line()
# line graph
dat_long %>% # we can also pipe the data to the plot. This is useful if we want to manipulate it first
filter(specimen_id==10) %>% # keep only one sample (10)
ggplot(mapping=aes(x=wavelength, y=reflectance, group=position, color=position)) + # colour replaces grouping for have different lines for dorsal and ventral measurements
geom_line() +
## add a title
ggtitle("Spectral reflectances of dorsal and ventral skin") +
## apply a canned theme
theme_classic()
dat_long %>%
ggplot(mapping=aes(x=wavelength, y=reflectance, group=paste(specimen_id, background, position))) +
geom_line() +
theme_classic()
dat_long %>%
ggplot(mapping=aes(x=wavelength, y=reflectance, group=specimen_id, color=background)) + # add grouping to have different lines for dorsal and ventral measurements
geom_line() +
facet_wrap(~position) +
theme_classic()
dat_long %>%
ggplot(mapping=aes(x=wavelength, y=reflectance, group=specimen_id, color=background)) + # add grouping to have different lines for dorsal and ventral measurements
geom_line() +
facet_wrap(~position) +
theme_classic()
dat_long %>%
ggplot(mapping=aes(x=wavelength, y=reflectance, group=specimen_id)) + # add grouping to have different lines for dorsal and ventral measurements
geom_line() +
facet_grid(position~background) +
theme_classic()
dat_long %>%
ggplot(mapping=aes(x=wavelength, y=reflectance, color=background)) + # drop the grouping variable here
geom_smooth(stat="smooth", method="loess", span=0.2) + # fit loess smoothing with a more relaxed smoothing span
facet_wrap(~position) +
theme_classic()
dat_long %>%
ggplot(mapping=aes(x=wavelength, y=reflectance, color=background)) + # drop the grouping variable here
geom_smooth(stat="smooth", method="loess", span=0.2) + # fit loess smoothing with a more relaxed smoothing span
facet_wrap(~position) +
theme_classic()
dat_long %>%
ggplot(mapping=aes(x=wavelength, y=reflectance, color=background))
dat_long %>%
ggplot(mapping=aes(x=wavelength, y=reflectance, color=background)) + # drop the grouping variable here
geom_smooth(stat="smooth", method="loess", span=0.2)
dat_long %>%
ggplot(mapping=aes(x=wavelength, y=reflectance, group=background,color=background)) + # drop the grouping variable here
geom_smooth(stat="smooth", method="loess", span=0.2) + # fit loess smoothing with a more relaxed smoothing span
facet_wrap(~position) +
theme_classic()
knitr::opts_chunk$set(echo = TRUE,
eval = TRUE,
message=FALSE,
error=FALSE,
fig.width=12,
fig.height=8)
library(webexercises)
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse,
DESeq2,
ggrepel,
plotly)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
# install pacman if not already installed
if (!require("pacman")) install.packages("pacman")
# use pacman to load libraries
pacman::p_load(tidyverse,
DESeq2,
ggrepel,
plotly)
txi<-readRDS("../data/salmon_gene_counts.rds")
str(txi)
str(txi)
txi<-readRDS("../data/salmon_gene_counts.rds")
str(txi)
class(txi)
str(txi)
lapply(X=txi, FUN=head)
apply(X=txi$abundance, FUN=sum, MARGIN = 2)
txi$counts %>%
as_tibble() %>% # turns matrix into tibble object class
pivot_longer(everything(), names_to="sample", values_to="counts") %>% # turns wide table to long table
mutate(counts=counts+1) %>% # we are going to plot on a log scale, so lets add 1 to each count so that log10(1) = 0
#  filter(counts>1) %>%
ggplot(aes(counts)) +
geom_histogram() +
ylab("number of genes") +
scale_x_log10() + # plot x-axis on a log scale
facet_wrap(~sample) # facet each sample into its own plot
txi$counts %>%
as_tibble() %>% # turns matrix into tibble object class
pivot_longer(everything(), names_to="sample", values_to="counts") %>% # turns wide table to long table
mutate(counts=counts+1) %>% # we are going to plot on a log scale, so lets add 1 to each count so that log10(1) = 0
#  filter(counts>1) %>%
ggplot(aes(counts)) +
geom_histogram() +
ylab("number of genes") +
scale_x_log10() + # plot x-axis on a log scale
facet_wrap(~sample) # facet each sample into its own plot
txi$counts %>%
as_tibble() %>% # turns matrix into tibble object class
pivot_longer(everything(), names_to="sample", values_to="counts") %>% # turns wide table to long table
mutate(counts=counts+1) %>% # we are going to plot on a log scale, so lets add 1 to each count so that log10(1) = 0
#  filter(counts>1) %>%
ggplot(aes(counts)) +
geom_histogram() +
ylab("number of genes") +
scale_x_log10() + # plot x-axis on a log scale
facet_wrap(~sample) # facet each sample into its own plot
# find rownames where all counts == 0
keepers<-rownames(txi$counts)[rowSums(txi$counts)>0]
length(keepers)
keepers
# keep all those rows
txi$counts<-txi$counts[keepers,]
txi$abundance<-txi$abundance[keepers,]
txi$length<-txi$length[keepers,]
#confirm rows have been dropped
dim(txi$counts)
samples<-read.csv("../data/experiment_data.csv")
samples
colnames(txi$counts)
tibble(
sample_id=colnames(txi$counts),
specimen_id=str_extract(sample_id, "\\d+") %>% as.numeric(),
position=str_extract(sample_id, "[A-Z]")
)
samples
tibble(
sample_id=colnames(txi$counts),
specimen_id=str_extract(sample_id, "\\d+") %>% as.numeric(),
position=str_extract(sample_id, "[A-Z]")
)
rna_samples<-tibble(
sample_id=colnames(txi$counts),
specimen_id=str_extract(sample_id, "\\d+") %>% as.numeric(),
position=str_extract(sample_id, "[A-Z]")
) %>%
left_join(samples)
rna_samples
rna_samples %>%
group_by(position, background) %>%
tally()
txi
rna_samples
# double check column names are the same order
colnames(txi$counts)==rna_samples$sample_id
# make DESeq object
dds <- DESeqDataSetFromTximport(txi,
colData = rna_samples,
design = ~ position + background)
dds
dds
dds_vst<-vst(dds)
dds_vst
assay(dds_vst) %>% head()
# standard DESeq2 PCA output top 500 most variable genes
plotPCA(dds_vst, intgroup=c("position", "background"), ntop=500)
# run PCA, but output the data, not the plot
pcaData<-plotPCA(dds_vst, intgroup=c("position", "background"), ntop=500, returnData=TRUE)
# extract percentage variance per PC axis
percentVar <- round(100 * attr(pcaData, "percentVar"))
# make a nice pca plot
ggplot(pcaData, aes(PC1, PC2, color=background, shape=position)) +
geom_point(size=4) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed() +
scale_color_manual(values=c("black","white"))+
theme_dark() +
ggtitle("PCA on 500 most variable genes")
dds <- DESeq(dds)
dds
DESeq(dds)
resultsNames(dds)
res_pos
# dorsal versus ventral
res_pos<-results(dds, name = "position_V_vs_D")
# dorsal versus ventral
res_pos<-results(dds, name = "position_V_vs_D")
res_pos
# black vs. white
res_bg<-results(dds, name = "background_white_vs_black")
res_bg
# dorsal versus ventral
res_pos<-results(dds, name = "position_V_vs_D")
res_pos
# black vs. white
res_bg<-results(dds, name = "background_white_vs_black")
res_bg
summary(res_pos, alpha=0.05)
summary(res_bg, alpha=0.05)
res_pos %>%
as_tibble(rownames = "gene_id") %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj))) +
geom_point(alpha=0.75, shape=16) +
ggtitle("Dorsum vs. Ventrum")
res_pos %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(significant= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=significant)) +
geom_point(alpha=0.75, shape=16) +
ggtitle("Dorsum vs. Ventrum") +
theme_bw()
annotations<-read_csv("../data/annotations.csv")
annotations
annotations %>%
filter(is.na(xen_pep_id)) %>%
nrow()
annotations %>%
filter(is.na(xen_gene_symbol)) %>%
nrow()
res_pos %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(significant= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(annotations) %>% # pull across the extra columns, based on a "gene_id" match
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=significant, label=xen_gene_symbol)) +# add label text
geom_point(alpha=0.75, shape=16) +
geom_text(data= . %>% filter(significant)) + # add text labels for only the significant genes
ggtitle("Dorsum vs. Ventrum") +
theme_bw() +
theme(legend.position="none")
res_pos %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(significant= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(annotations) %>% # pull across the extra columns, based on a "gene_id" match
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=significant, label=xen_gene_symbol)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(data= . %>% filter(significant)) +
ggtitle("Dorsum vs. Ventrum") +
theme_bw() +
theme(legend.position="none")
# save the plot as a ggplot object
p1<-res_pos %>%
as_tibble(rownames = "gene_id") %>%
drop_na(padj) %>% # drop all genes with NAs
filter(padj<0.5) %>% # reduce the number of points that need to be plotted
mutate(significant= padj<0.05 & abs(log2FoldChange)>=2) %>% # make a variable to indicate if a gene is significant based on a specific thresholds
left_join(annotations) %>% # pull across the extra columns, based on a "gene_id" match
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=significant, label=xen_gene_symbol)) +
geom_point(alpha=0.75, shape=16) +
ggtitle("Dorsum vs. Ventrum") +
theme_bw() +
theme(legend.position="none")
# convert the ggplot to a plotly object
ggplotly(p1, tooltip = "label") # define the "label" aesthetic as the hover text
# load a reduced annotation file
melanin_genes<-read_csv("../data/melanin_genes.csv")
melanin_genes
# combine the two DESeq results tables
res<-bind_rows(res_pos %>%
as_tibble(rownames="gene_id") %>%
mutate(contrast="Dorsal vs. Ventral"),
res_bg %>%
as_tibble(rownames="gene_id") %>%
mutate(contrast="Black vs. White"))
# plot
res %>%
drop_na(padj) %>%
#  filter(padj<0.5) %>%
mutate(sig= padj<0.05) %>% # lets be a bit more relaxed and not put a threshold on the fold change
left_join(melanin_genes) %>%
ggplot(aes(x=log2FoldChange, y=-log10(padj), color=sig, label=gene_symbol)) +
geom_point(alpha=0.75, shape=16) +
geom_text_repel(max.overlaps = Inf) + # set the maximum overlap to infinity, to show all labels.
xlim(-15,15) + # fix axis width
facet_wrap(~contrast) + # facet based on contrast
theme_minimal() +
scale_color_manual(values=c("grey","black")) +
theme(legend.position = "none")
